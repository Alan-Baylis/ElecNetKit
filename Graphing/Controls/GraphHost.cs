using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Media;
using System.Windows;
using System.ComponentModel;

//Necessary for Export Function.
using System.Windows.Xps;
using System.Windows.Xps.Packaging;
using System.IO;
using System.IO.Packaging;

using System.Windows.Media.Imaging;

namespace ElecNetKit.Graphing.Controls
{
    /// <summary>
    /// A control that can display one <see cref="Visual"/>, and handles layout
    /// accordingly.
    /// </summary>
    /// <remarks>
    /// This control should be used for displaying <see cref="Visual"/>s generated by
    /// <see cref="INetworkGraph"/>s in WPF applications.
    /// Adapted from http://msdn.microsoft.com/en-us/library/ms742254.aspx
    /// http://kentb.blogspot.com.au/2008/10/customizing-logical-children.html
    /// http://msdn.microsoft.com/en-us/library/system.windows.media.visual.removevisualchild.aspx
    /// http://www.codeproject.com/Articles/34741/Change-Notification-for-Dependency-Properties
    /// </remarks>
    public class GraphHost : VisualHost, INotifyPropertyChanged
    {
        INetworkGraph _Graph;

        public INetworkGraph Graph
        {
            set
            {
                _Graph = value;
                _Graph.ImgCoords = new Rect(0, 0, this.Width, this.Height);
                RefreshGraph();
            }
            get
            {
                return _Graph;
            }
        }

        public void RefreshGraph()
        {
            if (_Graph != null)
                Drawing = _Graph.Draw();
        }

        /// <summary>
        /// Instantiates a new <see cref="GraphHost"/> control.
        /// </summary>
        public GraphHost()
        {
            this.SizeChanged += GraphHost_SizeChanged;
        }

        void GraphHost_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            if (_Graph != null)
                _Graph.ImgCoords = new Rect(e.NewSize);
            RefreshGraph();
        }
    }
}
