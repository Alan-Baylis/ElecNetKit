<?xml version="1.0" encoding="utf-8"?>
<topic id="58652f95-5bc9-47fe-a12b-9edbe5170171" revisionNumber="1">
  <developerWalkthroughDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">


    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->

      <para>This walkthrough demonstrates a (very) simple use-case of ElecNetKit. The goal of this experiment is to measure the change in network voltages due to loads increasing by 10%.</para>
    </introduction>

    <prerequisites><content>
      <para>Before you get started with this walkthrough, make sure you've got a proper environment set up for using ElecNetKit. More instructions are provided in <link xlink:href="949e4556-eeed-4aea-b580-9cebbdbdab6d" />.</para></content></prerequisites>

    <!-- One or more procedure or section with procedure -->
    <procedure>
      <title>A Minimal Working Example</title>
      <steps class="bullet">
        <step>
          <content>
            <para>
              Before we start coding, download the example network package, and locate the file <fictitiousUri>IEEE13mod.dss</fictitiousUri>. We'll run our experiment on this network.
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>
              Create a new <ui>Visual C# console application</ui> targeting the <ui>.NET Framework 4.5</ui>. Name it <userInput>MinimalWorkingExample</userInput>.
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>
              Add the following references (either from local copies, with <ui>Project | Add Reference...</ui> or with <link xlink:href="http://nuget.org/">NuGet</link>, using <ui>Project | Manage NuGet Packages...</ui>):
            </para>
            <list class="bullet">
              <listItem>
                <para>
                  <codeInline>ElecNetKit.Core</codeInline> - contains the core functionality of ElecNetKit,
                </para>
              </listItem>
              <listItem>
                <para>
                  <codeInline>ElecNetKit.Engines.OpenDSS</codeInline> - provides access to the OpenDSS Simulator, and
                </para>
              </listItem>
              <listItem>
                <para>
                  <codeInline>System.Numerics</codeInline> - required for interacting with complex numbers.
                </para>
              </listItem>
            </list>
          </content>
        </step>
        <step>
          <content>
            <para>
              We need to write an experimentor that increases the size of each load by 10%. Choose <ui>Project | Add Class ...</ui> and type the name <userInput>LoadScalingExperimentor</userInput>.
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>
              Modify the <fictitiousUri>LoadScalingExperimentor.cs</fictitiousUri> file as shown:
            </para>
            <code language="c#" source="../Examples/MinimalWorkingExample/LoadScalingExperimentor.cs" />
          </content>
        </step>
        <step>
          <content>
            <para>
              Now, we're ready to chain it all together. Add the following <codeInline>using</codeInline> directives at the top of the <fictitiousUri>Program.cs</fictitiousUri> file:
            </para>
            <code language="c#" source="../Examples/MinimalWorkingExample/Program.cs" region="UsingsMWE" />
          </content>
        </step>
        <step>
          <content>
            <para>
              Add the following code to your <codeInline>Main()</codeInline> method:
            </para>
            <code language="c#" source="../Examples/MinimalWorkingExample/Program.cs" region="MainMWE" />
            <para>
              Don't forget to change the path in the above code to the location of the <fictitiousUri>IEEE13mod.dss</fictitiousUri> file!
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>Build and run the project. You should get output that looks like:</para>
            <code language="none" source="../Examples/MinimalWorkingExample/Output.txt" />
          </content>
        </step>
      </steps>
    </procedure>
    <section>
      <title>Remarks</title>
      <content>
        <list class="bullet">
          <listItem>
            <para>
              Note that the implementation of <codeEntityReference qualifyHint="false">T:ElecNetKit.Experimentation.IExperimentor</codeEntityReference> in this example returns a list of strings that define commands to run on the network. These commands are specific syntax to OpenDSS, the simulator used in this example, and will not work in another simulator.
            </para>
          </listItem>
        </list>
      </content>
    </section>
    <procedure>
      <title>Displaying Network Graphs</title>
      <steps class="bullet">
        <step>
          <content>
            <para>Add the following references to your project:</para>
          <list class="nobullet">
            <listItem>
              <para>
                Using either <ui>NuGet</ui> or <ui>Project | Add References...</ui>:
              </para>
              <list class="bullet">
                <listItem>
                  <para><codeInline>ElecNetKit.Graphing</codeInline> - provides access to graphing functionality.</para>
                </listItem>
              </list>
            </listItem>
          <listItem>
            <para>Using <ui>Project | Add References... | Assemblies | Framework</ui>:
          </para>
            <list class="bullet">
              <listItem>
                <para><codeInline>PresentationCore</codeInline></para>
              </listItem>
            <listItem>
                <para><codeInline>PresentationFramework</codeInline></para>
              </listItem>
          <listItem>
                <para><codeInline>System.Xaml</codeInline></para>
              </listItem>
            <listItem>
                <para><codeInline>WindowsBase</codeInline></para>
              </listItem>
            </list>
            <para>
              This last set of references are required because ElecNetKit uses Windows Presentation Foundation (WPF) for graphing. In a WPF application, you will not need to add these references - the graphing components will Just Work&#8482;.
            </para>
          </listItem>
          </list>
          </content>
        </step>
        <step>
          <content>
            <para>Add the following <codeInline>using</codeInline> directives, right underneath the currently existing ones:</para>
          <code language="c#" source="../Examples/MinimalWorkingExample/Program.cs" region="UsingsGraphing" />
          </content>
        </step>
      <step>
          <content>
            <para>Add the following code at the very bottom of your <codeInline>Main()</codeInline> method:</para>
          <code language="c#" source="../Examples/MinimalWorkingExample/Program.cs" region="MainGraphing" />
          </content>
        </step>
        <step>
          <content>
            <para>That's it! Build and run the program, and behold your lovely new graph:</para>
            <mediaLink>
              <caption>Graph Output</caption>
              <image xlink:href="GraphOutput"/>
            </mediaLink>
          </content>
        </step>
      </steps>
    </procedure>
    <section><title>Additional Remarks</title>
    <content>
      <para>The ElecNetKit Graphing suite is very powerful, and what you've seen here is a very simple example. You might like to take a look at <link xlink:href="1201915e-1e35-440e-94ba-729903b0f473"/> for more information as to what's available.</para>
    </content></section>
    
    <nextSteps>
      <content><para>Now that you've set up a development environment and built a minimal working example, you might like to read about <link xlink:href="dbdbbdc6-bd5c-4f0c-87a1-a5bdeb27b02c" />.</para></content>
    </nextSteps>
    

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>
