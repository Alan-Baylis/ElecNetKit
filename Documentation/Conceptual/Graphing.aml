<?xml version="1.0" encoding="utf-8"?>
<topic id="1201915e-1e35-440e-94ba-729903b0f473" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>ElecNetKit ships with a couple of very powerful graphing tools. This article outlines the use of the graphs included with ElecNetKit, as well as the use of a window and control for hosting these graphs.</para>
      <autoOutline />
    </introduction>
    <section address="hosting">
      <title>Hosting Graphs</title>
      <content>
        <para>ElecNetKit provides two methods for hosting graphs within WPF or console applications: <codeEntityReference qualifyHint="false">T:ElecNetKit.Graphing.Controls.GraphHost</codeEntityReference> and <codeEntityReference qualifyHint="false">T:ElecNetKit.Graphing.Controls.GraphHostWindow</codeEntityReference>. Each of these methods are outlined here.</para>
      </content>
      <sections>
          <section address="graphhost">
              <title>GraphHost</title>
              <content>
                  <para><codeEntityReference qualifyHint="false">T:ElecNetKit.Graphing.Controls.GraphHost</codeEntityReference> is a control that can be used in WPF windows. If you're writing an application with a custom user interface, this is probably what you're looking for. <codeEntityReference qualifyHint="false">T:ElecNetKit.Graphing.Controls.GraphHost</codeEntityReference> is inherited from <codeEntityReference qualifyHint="false">T:System.Windows.FrameworkElement</codeEntityReference>, which means it provides all the usual events that WPF controls provide.</para>
              </content>
          </section>
          <section address="graphhostwindow">
              <title>GraphHostWindow</title>
              <content>
                  <para>If you don't really want to have to deal with your own UI, or plan on writing a console application, <codeEntityReference qualifyHint="false">T:ElecNetKit.Graphing.Controls.GraphHostWindow</codeEntityReference> is the way to go. It launches a window that contains the specified graph. Incorporating <codeEntityReference qualifyHint="false">T:ElecNetKit.Graphing.Controls.GraphHostWindow</codeEntityReference> in console applications entails a couple of extra requirements. If you're thinking of using <codeEntityReference qualifyHint="false">T:ElecNetKit.Graphing.Controls.GraphHostWindow</codeEntityReference> for such applications, you may find <link xlink:href="58652f95-5bc9-47fe-a12b-9edbe5170171#graphing" /> helpful.
                </para>
              </content>
          </section>
      </sections>
    </section>
    <section address="graphs">
      <title>Included Graphs</title>
      <content>
        <para>A couple of graphs come included with ElecNetKit. They are:</para>
      <autoOutline lead="none" />
    </content>
      <sections>
        <section address="valuetransformable">
          <title>ValueTransformableTreeGraph</title>
          <content>
            <para>
              <codeEntityReference qualifyHint="false">T:ElecNetKit.Graphing.Graphs.ValueTransformableTreeGraph</codeEntityReference>s are top-down graphs that represent a network in terms of its geographical location.
            </para>
            <mediaLink>
              <caption>Sample ValueTransformableTreeGraph output</caption>
              <image xlink:href="ValueTransformableTreeGraph"/>
            </mediaLink>
            <para>The positioning of network elements is a given, but the colour of buses (those small dots) and the lines connecting them, the size of buses and even the distance and visibility of those rings are controllable. Each one of these items is controlled by a <newTerm>Value Transform</newTerm>, a custom function that takes a <codeEntityReference qualifyHint="false">T:ElecNetKit.NetworkModelling.Bus</codeEntityReference>, and uses network model traversal (see <link xlink:href="dbdbbdc6-bd5c-4f0c-87a1-a5bdeb27b02c" />) to return some kind of data that should be displayed. In the example presented above, both <codeEntityReference qualifyHint="false">P:ElecNetKit.Graphing.Graphs.ValueTransformableTreeGraph.BusColorTransform</codeEntityReference> and <codeEntityReference qualifyHint="false">P:ElecNetKit.Graphing.Graphs.ValueTransformableTreeGraph.BusSizeTransform</codeEntityReference> are scaled with the lambda function:
            </para>
            <code language="c#">
              bus => bus.VoltagePU.Magnitude
            </code>
            <para>
              Rings are only to be displayed on buses that have generation attached. As such,
              <codeEntityReference qualifyHint="false">P:ElecNetKit.Graphing.Graphs.ValueTransformableTreeGraph.BusVisibleTransform</codeEntityReference> is set with:
            </para>
            <code language="c#">
                <![CDATA[
              bus => bus.ConnectedTo.OfType<Generator>().Any()
            ]]>
              </code>
            <para>
              We don't care what size the ring is, just that it's visible, so we set to the <codeEntityReference qualifyHint="false">P:ElecNetKit.Graphing.Graphs.ValueTransformableTreeGraph.RingDistanceTransform</codeEntityReference> with:
            </para>
            <code language="c#">
              bus => 2 //constant
            </code>
            <para>Putting it all together, you can configure the graph as follows:</para>
            <code language="c#" source="../Examples/MinimalWorkingExample/Program.cs" region="ValueTransform" />
            <para>
              If you drop that code in instead of the graphing code outlined in <link xlink:href="58652f95-5bc9-47fe-a12b-9edbe5170171#graphing" />, then you should get a result similar to the following image:</para>
            <mediaLink>
              <caption>Graphing the IEEE13bus.dss example</caption>
              <image xlink:href="MWETreeGraph"/>
            </mediaLink>
          </content>
        </section>
        <section address="feederprofilegraph">
          <title>FeederProfileGraph</title>
          <content>
            <para><codeEntityReference qualifyHint="false">T:ElecNetKit.Graphing.Graphs.FeederProfileGraph</codeEntityReference>s behave quite differently, plotting the voltage along the feeder against the cable distance from the source bus:
            </para>
            <mediaLink>
              <caption>A sample FeederProfileGraph plot. The vertical axis represents per unit voltage, and the horizontal axis represents distance from the source bus.</caption>
              <image xlink:href="FeederProfileGraph"/>
            </mediaLink>
            <para>
              <codeEntityReference qualifyHint="false">T:ElecNetKit.Graphing.Graphs.FeederProfileGraph</codeEntityReference>s require a <codeEntityReference qualifyHint="false">P:ElecNetKit.Graphing.Graphs.FeederProfileGraph.SelectedElement</codeEntityReference> to be set - this governs the feeder that should be plotted. Any line that is required for connection of the <codeEntityReference qualifyHint="false">P:ElecNetKit.Graphing.Graphs.FeederProfileGraph.SelectedElement</codeEntityReference> to the <codeEntityReference qualifyHint="false">P:ElecNetKit.NetworkModelling.NetworkModel.SourceBus</codeEntityReference> is included in the plot, along with any line from the <codeEntityReference qualifyHint="false">P:ElecNetKit.Graphing.Graphs.FeederProfileGraph.SelectedElement</codeEntityReference> away from the <codeEntityReference qualifyHint="false">P:ElecNetKit.NetworkModelling.NetworkModel.SourceBus</codeEntityReference> to the end of the feeder. In the example above, then, the <codeEntityReference qualifyHint="false">P:ElecNetKit.Graphing.Graphs.FeederProfileGraph.SelectedElement</codeEntityReference> is located to the left of the first branch-point on the graph.
            </para>
          </content>
        </section>
      </sections>
    </section>
    <relatedTopics>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
